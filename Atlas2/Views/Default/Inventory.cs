#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Atlas2.Views.Default
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class Inventory : InventoryBase
{

#line hidden

public override void Execute()
{
WriteLiteral("<!DOCTYPE html>\n<html>\n<head>\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width\"");

WriteLiteral(" />\n\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"/Scripts/jquery-3.3.1.min.js\"");

WriteLiteral("></script>\n\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" src=\"/Scripts/GenerateTable.js\"");

WriteLiteral("></script>\n\n    <title></title>\n\n    <script");

WriteLiteral(" src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"");

WriteLiteral("></script>\n  \n    <style>\n        body {\n            margin: 0;\n            font-" +
"family: Arial, Helvetica, sans-serif;\n        }\n\n        h2 {\n            paddin" +
"g-left: 15px;\n        }\n\n        table {\n            border: 1px solid #ccc;\n   " +
"         border-collapse: collapse;\n            width: 80%;\n        }\n\n         " +
"   table th {\n                background-color: #F7F7F7;\n                color: " +
"#333;\n                font-weight: bold;\n                text-align: left;\n     " +
"       }\n\n            table th, table td {\n                padding: 15px;\n      " +
"          text-align: left;\n                border-bottom: 1px solid #ddd;\n     " +
"       }\n\n        tr:hover {\n            background-color: #f5f5f5;\n        }\n\n\n" +
"\n        .topnav {\n            overflow: hidden;\n            background-color: #" +
"25275A;\n        }\n\n            .topnav a {\n                float: left;\n        " +
"        color: #f2f2f2;\n                text-align: center;\n                padd" +
"ing: 14px 16px;\n                text-decoration: none;\n                font-size" +
": 17px;\n            }\n\n                .topnav a:hover {\n                    bac" +
"kground-color: #B0EEFA;\n                    color: black;\n                }\n\n   " +
"             .topnav a.active {\n                    background-color: #7ED8F9;\n " +
"                   color: #343E46;\n                }\n\r\n        .modal {\r\n       " +
"     display: none; /* Hidden by default */\r\n            position: fixed; /* Sta" +
"y in place */\r\n            z-index: 1; /* Sit on top */\r\n            padding-top" +
": 100px; /* Location of the box */\r\n            left: 0;\r\n            top: 0;\r\n " +
"           width: 100%; /* Full width */\r\n            height: 100%; /* Full heig" +
"ht */\r\n            overflow: auto; /* Enable scroll if needed */\r\n            ba" +
"ckground-color: rgb(0,0,0); /* Fallback color */\r\n            background-color: " +
"rgba(0,0,0,0.4); /* Black w/ opacity */\r\n        }\r\n\r\n        .modal-content {\r\n" +
"            background-color: #fefefe;\r\n            margin: auto;\r\n            p" +
"adding: 20px;\r\n            border: 1px solid #888;\r\n            width: 80%;\r\n   " +
"     }\r\n\r\n        .modal input[type=text], select, textarea {\r\n            width" +
": 100%; /* Full width */\r\n            padding: 12px; /* Some padding */\r\n       " +
"     border: 1px solid #ccc; /* Gray border */\r\n            border-radius: 4px; " +
"/* Rounded borders */\r\n            box-sizing: border-box; /* Make sure that pad" +
"ding and width stays in place */\r\n            margin-top: 6px; /* Add a top marg" +
"in */\r\n            margin-bottom: 16px; /* Bottom margin */\r\n            resize:" +
" vertical /* Allow the user to vertically resize the textarea (not horizontally)" +
" */\r\n        }\r\n\r\n        .close {\r\n            color: #aaaaaa;\r\n            flo" +
"at: right;\r\n            font-size: 28px;\r\n            font-weight: bold;\r\n      " +
"  }\r\n\r\n            .close:hover,\r\n            .close:focus {\r\n                co" +
"lor: #000;\r\n                text-decoration: none;\r\n                cursor: poin" +
"ter;\r\n            }\n    </style>\n</head>\n<body>\n    <div");

WriteLiteral(" class=\"topnav\"");

WriteLiteral(">\n        <a");

WriteLiteral(" class=\"active\"");

WriteLiteral(" href=\"Inventory\"");

WriteLiteral(">Inventory</a>\n        <a");

WriteLiteral(" href=\"Equipment\"");

WriteLiteral(">Equipment</a>\n        <a");

WriteLiteral(" href=\"Contacts\"");

WriteLiteral(">Contacts</a>\n    </div>\n    <div");

WriteLiteral(" id=\"editModal\"");

WriteLiteral(" class=\"modal\"");

WriteLiteral(" style=\"z-index:2000\"");

WriteLiteral(">\n        <div");

WriteLiteral(" class=\"modal-content\"");

WriteLiteral(">\r\n            <span");

WriteLiteral(" class=\"close\"");

WriteLiteral(">&times;</span>\r\n            <p>Edit Contact</p>\r\n            <div");

WriteLiteral(" class=\"container\"");

WriteLiteral(">\r\n                <label>Location</label>\r\n                <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" /><br />\r\n                <label>Address</label>\r\n                <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" /><br />\r\n                <label>Email</label>\r\n                <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" /><br />\r\n                <label>Phone Number</label>\r\n                <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" /><br />\r\n                <button>Edit</button>\r\n            </div>\r\n           " +
" <div");

WriteLiteral(" id=\"popupContent\"");

WriteLiteral("></div>\r\n        </div>\n    </div>\n    <div");

WriteLiteral(" id=\"myModal\"");

WriteLiteral("></div>\n    <div");

WriteLiteral(" id=\"partModal\"");

WriteLiteral(" class=\"modal\"");

WriteLiteral(" style=\"z-index:1999\"");

WriteLiteral(">\r\n        <!-- Modal content -->\r\n        <div");

WriteLiteral(" class=\"modal-content\"");

WriteLiteral(">\r\n            <span");

WriteLiteral(" class=\"close\"");

WriteLiteral(">&times;</span>\r\n            <p>Part Modal</p>\r\n            <div");

WriteLiteral(" class=\"container\"");

WriteLiteral(">\r\n                <label>Part Name: </label>\r\n                <label");

WriteLiteral(" id=\"partName\"");

WriteLiteral("></label>\r\n                <br /><br />\r\n                <label>SKU: </label>\n   " +
"             <label");

WriteLiteral(" id=\"partSku\"");

WriteLiteral("></label>\r\n                <br /><br />\r\n                <label>Count: </label>\n " +
"               <label");

WriteLiteral(" id=\"partCount\"");

WriteLiteral("></label>\r\n                <br /><br />\r\n                <table");

WriteLiteral(" id=\"modalTable\"");

WriteLiteral("></table>\n                <button");

WriteLiteral(" class=\"editButton\"");

WriteLiteral(" accesskey=\"partEdit\"");

WriteLiteral(">Open Edit Modal</button>\n                <button");

WriteLiteral(" class=\"editButton\"");

WriteLiteral(" accesskey=\"partAdd\"");

WriteLiteral(">Add to System</button>\r\n                <script>\r\n                    ");

WriteLiteral("\r\n                        $(\".editButton\").click(function() {\r\n                  " +
"          openModal(this.accessKey);\r\n                        });\r\n             " +
"   </script>\r\n            </div>\r\n        </div>\r\n    </div>\n    <div");

WriteLiteral(" id=\"partEditModal\"");

WriteLiteral(" class=\"modal\"");

WriteLiteral(" style=\"z-index:2000\"");

WriteLiteral(">\n        <div");

WriteLiteral(" class=\"modal-content\"");

WriteLiteral(">\r\n            <span");

WriteLiteral(" class=\"close\"");

WriteLiteral(">&times;</span>\r\n            <p>Part Edit Modal</p>\r\n            <div");

WriteLiteral(" class=\"container\"");

WriteLiteral(">\n                <label>Part Name: </label>\n                <label");

WriteLiteral(" id=\"partName\"");

WriteLiteral("></label>\n                <br/>\n                <label>Count: </label>\n          " +
"      <label");

WriteLiteral(" id=\"partCount\"");

WriteLiteral("></label>\n                <br/>\n                <button>Add: </button>\n          " +
"      <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" style=\"width:50px; height: 30px\"");

WriteLiteral("/>\n                <br/>\n                <button>Remove: </button>\n              " +
"  <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" style=\"width: 50px; height: 30px\"");

WriteLiteral("/>\r\n            </div>\r\n        </div>\n    </div>\n    <div");

WriteLiteral(" id=\"partSystemModal\"");

WriteLiteral(" class=\"modal\"");

WriteLiteral(" style=\"z-index:2000\"");

WriteLiteral(">\n        <div");

WriteLiteral(" class=\"modal-content\"");

WriteLiteral(">\n            <span");

WriteLiteral(" class=\"close\"");

WriteLiteral(">&times;</span>\n            <p>Add to System</p>\n            <div");

WriteLiteral(" class=\"container\"");

WriteLiteral(">\n                <div");

WriteLiteral(" id=\"partSystemTable\"");

WriteLiteral("></div>\n                <script>\n                     GenerateTable(\"/api/Invento" +
"ry/table/\", \"partSystem\", \"partSystemTable\");\n                </script>\n        " +
"    </div>\n        </div>\n    </div>\n    <div");

WriteLiteral(" id=\"systemModal\"");

WriteLiteral(" class=\"modal\"");

WriteLiteral(" style=\"z-index:1999\"");

WriteLiteral(">\r\n        <!-- Modal content -->\r\n        <div");

WriteLiteral(" class=\"modal-content\"");

WriteLiteral(">\r\n            <span");

WriteLiteral(" class=\"close\"");

WriteLiteral(">&times;</span>\r\n            <p>System Modal</p>\r\n            <div");

WriteLiteral(" class=\"container\"");

WriteLiteral(">\r\n                <label>System Name: </label>\r\n                <label");

WriteLiteral(" id=\"systemName\"");

WriteLiteral("></label>\r\n                <br /><br />\r\n                <label>SKU: </label>\n   " +
"             <label");

WriteLiteral(" id=\"systemSku\"");

WriteLiteral("></label>\r\n                <br /><br />\r\n                <table");

WriteLiteral(" id=\"systemTable\"");

WriteLiteral("></table>\r\n                <button");

WriteLiteral(" class=\"editButton\"");

WriteLiteral(" accesskey=\"systemEdit\"");

WriteLiteral(">Open Edit Modal</button>\r\n                <button");

WriteLiteral(" class=\"editButton\"");

WriteLiteral(" accesskey=\"systemBuild\"");

WriteLiteral(">Build New System</button>\r\n                <script>\r\n                    $(\".edi" +
"tButton\").click(function() {\r\n                        openModal(this.accessKey);" +
"\r\n                    });\r\n                    ");

WriteLiteral("\r\n                </script>\r\n            </div>\r\n        </div>\r\n    </div>\n    <" +
"div");

WriteLiteral(" id=\"systemEditModal\"");

WriteLiteral(" class=\"modal\"");

WriteLiteral(" style=\"z-index: 2000\"");

WriteLiteral(">\n        <div");

WriteLiteral(" class=\"modal-content\"");

WriteLiteral(">\r\n            <span");

WriteLiteral(" class=\"close\"");

WriteLiteral(">&times;</span>\r\n            <p>System Edit Modal</p>\r\n            <div");

WriteLiteral(" class=\"container\"");

WriteLiteral(">\r\n                <label>Part Name: </label>\r\n                <label>Count: </la" +
"bel>\r\n                <br />\r\n                <button>Add: </button>\r\n          " +
"      <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" width=\"100\"");

WriteLiteral(" />\r\n                <br />\r\n                <label>Remove: </label>\r\n           " +
"     <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" width=\"100\"");

WriteLiteral(" />\r\n            </div>\r\n        </div>\n    </div>\n    <div>\n    <div");

WriteLiteral(" id=\"systemBuildModal\"");

WriteLiteral(" class=\"modal\"");

WriteLiteral(" style=\"z-index: 2000\"");

WriteLiteral(">\n        <div");

WriteLiteral(" class=\"modal-content\"");

WriteLiteral(">\n            <span");

WriteLiteral(" class=\"close\"");

WriteLiteral(">&times;</span>\n            <p>Build New System Modal</p>\n        </div>\n    </di" +
"v>\r\n        <h2");

WriteLiteral(" id=\"Mainlbl\"");

WriteLiteral(">Inventory Page</h2>\r\n        <label");

WriteLiteral(" id=\"Srchlbl\"");

WriteLiteral(" style=\"padding-left: 15px\"");

WriteLiteral(">Keyword: </label>\r\n        <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" id=\"SearchBox\"");

WriteLiteral(@" style=""
            width: 130px;
            box-sizing: border-box;
            border: 2px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
            background-color: white;
            background-image: url(Downloads/searchicon.png);
            background-position: 10px 10px;
            background-repeat: no-repeat;
            padding: 12px 20px 12px 40px; }""");

WriteLiteral(" placeholder=\"Search...\"");

WriteLiteral(" /><br />\r\n        <div");

WriteLiteral(" id=\"divTable\"");

WriteLiteral("></div>\r\n        <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(">\r\n            GenerateTable(\"/api/Inventory/table/\", \"part\", \"divTable\");\r\n\r\n   " +
"         $(document).ready(function(){\r\n                $(\"#SearchBox\").on(\"keyu" +
"p\", function() {\r\n                    var value = $(this).val().toLowerCase();\r\n" +
"                    $(\"#TableBody tr\").filter(function() {\r\n                    " +
"    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)\r\n          " +
"          });\r\n                \r\n\r\n                });\r\n            });\r\n\r\n     " +
"       var modal = document.getElementById(\'myModal\');\r\n            var editModa" +
"l = document.getElementById(\'editModal\');\r\n            var span = document.getEl" +
"ementsByClassName(\"close\")[0];\r\n            var modalType = document.getElementB" +
"yId(\"Category\");\r\n\r\n            function openModal(row) {\r\n                if(mo" +
"dal.style.display == \"block\") {\r\n                    if(row == \"partEdit\") {\r\n  " +
"                      editModal = document.getElementById(\'partEditModal\');\r\n   " +
"                 }\n                    else if(row == \"partAdd\") {\n             " +
"           editModal = document.getElementById(\'partSystemModal\');\n             " +
"       }\r\n                    else if(row == \"systemEdit\") {\r\n                  " +
"      editModal = document.getElementById(\'systemEditModal\');\r\n                 " +
"   }\n                    else if(row == \"systemBuild\") {\n                       " +
" editModal = document.getElementById(\'systemBuildModal\');\n                    }\r" +
"\n                    editModal.style.display = \"block\";\r\n                }\r\n    " +
"            else {\r\n                    if(row[row.length - 1].innerText == \"par" +
"t\") {\r\n                        modal = document.getElementById(\'partModal\');\r\n  " +
"                      var name = document.getElementById(\'partName\');\r\n         " +
"               name.innerHTML = row[1].innerText;\r\n                        var s" +
"ku = document.getElementById(\'partSku\');\r\n                        sku.innerHTML " +
"= row[2].innerText;\r\n                        var count = document.getElementById" +
"(\'partCount\');\r\n                        count.innerHTML = row[4].innerText;\r\n   " +
"                 }\r\n                    if(row[row.length - 1].innerText == \"sys" +
"tem\") {\r\n                        modal = document.getElementById(\'systemModal\');" +
"\n                        var name = document.getElementById(\'systemName\');\n     " +
"                   name.innerHTML = row[1].innerText;\n                        va" +
"r sku = document.getElementById(\'systemSku\');\r\n                    }\r\n          " +
"          modal.style.display = \"block\";\r\n               }\r\n            }\r\n\r\n   " +
"         span.onclick = function() {\r\n                if(editModal.style.display" +
" == \"none\") {\r\n                    modal.style.display = \"none\";\r\n              " +
"  }\r\n                else editModal.style.display = \"none\";\r\n            }\r\n\r\n  " +
"          window.onclick = function(event) {\r\n                if (event.target =" +
"= modal) {\r\n                    modal.style.display = \"none\";\r\n                }" +
"\r\n                if (event.target == editModal) {\r\n                    editModa" +
"l.style.display = \"none\";\r\n                }\r\n            }\r\n        </script>\r\n" +
"    </div>\n</body>\n</html>\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class InventoryBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
